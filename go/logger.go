// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nulladmin.com aitokenizer
 *
 * Aitokenizer is a Nulladmin.com microservice which performs input tokenization for AI workloads. It supports various encodings used by OpenAI, Anthropic and others.
 *
 * API version: 1.0.0
 */

package aitokenizer

import (
	"net/http"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"

	"github.com/spf13/viper"
	_ "github.com/spf13/viper/remote"
)

var (
	Logzap *zap.Logger
)

// Initialize the zap logger. Here you can customize your global logging preferences.
func InitLogzap() *zap.Logger {

	config := zap.NewProductionConfig()

	// Set debug log level if we have a config value
	if viper.GetBool("debug") {
		config.Level = zap.NewAtomicLevelAt(zapcore.DebugLevel)
	}

	// For this simple microservice we turn off sampling
	config.Sampling = nil

	// Zap default time display is a Unix timestamp with high resolution.
	// Import "go.uber.org/zap/zapcore" and uncomment below for a more human readable
	// timestamp, e.g. 2024-03-06T19:09:32.485Z
	// config.EncoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder

	Logzap, err := config.Build()
	if err != nil {
		panic(err)
	}
	return Logzap
}

// HTTP middleware for logging the request
func ReqLogger(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

		// Log the request
		zap.L().Info("",
			zap.String("Method", r.Method),
			zap.String("RequestURI", r.RequestURI),
		)

		next.ServeHTTP(w, r)

	})
}
