// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nulladmin.com aitokenizer
 *
 * Aitokenizer is a Nulladmin.com microservice which performs input tokenization for AI workloads. It supports various encodings used by OpenAI, Anthropic and others.
 *
 * API version: 1.0.0
 */

package aitokenizer

import (
	"context"
	"github.com/hupe1980/go-tiktoken"
	"net/http"
	"os"

	"github.com/spf13/viper"
	_ "github.com/spf13/viper/remote"
	"go.uber.org/zap"
)

// O200kBaseAPIService is a service that implements the logic for the O200kBaseAPIServicer
// This service should implement the business logic for every endpoint for the O200kBaseAPI API.
// Include any external packages or services that will be required by this service.
type O200kBaseAPIService struct {
}

// NewO200kBaseAPIService creates a default api service
func NewO200kBaseAPIService() *O200kBaseAPIService {
	return &O200kBaseAPIService{}
}

// EncodeO200kBasePost - Upload text file for BPF encoding
func (s *O200kBaseAPIService) EncodeO200kBasePost(ctx context.Context, filename *os.File) (ImplResponse, error) {

	// It may be useful to log the temp file name passed in for debug purposes
	if viper.GetBool("debug") {
		zap.L().Debug("Encoding o200k_base", zap.String("filename", filename.Name()))
	}

	encoding, err := tiktoken.NewEncodingForModel("gpt-4o")
	if err != nil {
		zap.L().Error("NewEncodingForMode error", zap.Error(err))
		r := &EncodeO200kBasePost400Response{Message: err.Error()}
		return Response(http.StatusInternalServerError, r), nil
	}

	fileContent, err := os.ReadFile(filename.Name())
	if err != nil {
		zap.L().Error("ReadFile error", zap.Error(err))
		r := &EncodeO200kBasePost400Response{Message: err.Error()}
		return Response(http.StatusInternalServerError, r), nil
	}

	// We no longer need the temp file so let's remove it.
	// Errors mean something is seriously wrong with the server
	// so we return an internal server error. Aruguably we could
	// just log, panic, and quit.
	err = os.Remove(filename.Name())
	if err != nil {
		zap.L().Error("Remove temp file error", zap.Error(err))
		r := &EncodeO200kBasePost400Response{Message: err.Error()}
		return Response(http.StatusInternalServerError, r), nil
	}

	ids, _, err := encoding.Encode(string(fileContent), nil, nil)
	if err != nil {
		zap.L().Error("Encode error", zap.Error(err))
		r := &EncodeO200kBasePost400Response{Message: err.Error()}
		return Response(http.StatusInternalServerError, r), nil
	}

	zap.L().Info("",
		zap.Int("Response", http.StatusOK),
	)
	return Response(http.StatusOK, ids), nil

}
