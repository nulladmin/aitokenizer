// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nulladmin.com aitokenizer
 *
 * Aitokenizer is a Nulladmin.com microservice which performs input tokenization for AI workloads. It supports various encodings used by OpenAI, Anthropic and others.
 *
 * API version: 1.0.0
 */

package aitokenizer

import (
	"net/http"
	"os"
	"strings"
)

// Gpt2APIController binds http requests to an api service and writes the service results to the http response
type Gpt2APIController struct {
	service      Gpt2APIServicer
	errorHandler ErrorHandler
}

// Gpt2APIOption for how the controller is set up.
type Gpt2APIOption func(*Gpt2APIController)

// WithGpt2APIErrorHandler inject ErrorHandler into controller
func WithGpt2APIErrorHandler(h ErrorHandler) Gpt2APIOption {
	return func(c *Gpt2APIController) {
		c.errorHandler = h
	}
}

// NewGpt2APIController creates a default api controller
func NewGpt2APIController(s Gpt2APIServicer, opts ...Gpt2APIOption) *Gpt2APIController {
	controller := &Gpt2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the Gpt2APIController
func (c *Gpt2APIController) Routes() Routes {
	return Routes{
		"EncodeGpt2Post": Route{
			strings.ToUpper("Post"),
			"/v1/encode/gpt2",
			c.EncodeGpt2Post,
		},
	}
}

// EncodeGpt2Post - Upload text file for gpt2 encoding
func (c *Gpt2APIController) EncodeGpt2Post(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var filenameParam *os.File
	{
		param, err := ReadFormFileToTempFile(r, "filename")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "filename", Err: err}, nil)
			return
		}

		filenameParam = param
	}

	result, err := c.service.EncodeGpt2Post(r.Context(), filenameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
